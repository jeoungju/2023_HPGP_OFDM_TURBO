`timescale 1ps/1ps
//------- fft 384 mux --------

module rom_384 (
	input clk,
	input n_rst,
	input [A_WIDTH-1:0]din_num, // Carrier Number, din 0-383 => 9bit

	input din_vld,

	output [COS_SIN*2-1:0] data, // data = {cos,sin}
	output dout_vld
	//output dout_re,
	//output dout_im
);

parameter D_WIDTH = 4;
parameter A_WIDTH = 9;
parameter COS_SIN = 14;

parameter ANGLE_360 = 5'd16;
parameter ANGLE_180 = 5'd8;

// din 10-153 => 8bit

//  cos parameter
localparam COS_0 = 14'b0_1_0000_0000_0000;
//  1.0
localparam COS_PI_8 = 14'b0_0_1110_1100_1000;
//  0.923880
localparam COS_PI_4 = 14'b0_0_1011_0101_0000;
//  0.707107
//  sin parameter
localparam SIN_0 = 14'b0_0_0000_0000_0000;
//  0.0
localparam SIN_PI_8 = 14'b0_0_0110_0001_1111;
//  0.382683
localparam SIN_PI_4 = 14'b0_0_1011_0101_0000;
//  0.707107


reg [D_WIDTH-1:0] rom_cell [0:2**A_WIDTH-1];
reg [D_WIDTH-1:0] data_f;

// address rom
initial  begin
    //$readmemh("../src/rtl/rom_384_angle.txt", rom_cell);
	$readmemh("../src/rtl/rom_384_addr.txt", rom_cell);
end

// rom-addr match
wire [A_WIDTH-1:0] addr;
assign addr = din_num + 9'd1;
always @(posedge clk or negedge n_rst) begin
	if (!n_rst) begin
		data_f <= {(D_WIDTH){1'b0}};
	end
	else begin
		data_f <= rom_cell[addr];
	end
end

reg [COS_SIN-1:0] dout_re, dout_im;
always @(posedge clk or negedge n_rst) begin
	if(!n_rst) begin
		dout_re <= {(COS_SIN){1'b0}};
	end
	else begin
		if (data_f == 4'h0) begin
			dout_re <= COS_0;
		end
		else if (data_f == 4'h1 || data_f == 4'hf) begin
			dout_re <= COS_PI_8;
		end
		else if (data_f == 4'h2 || data_f == 4'he) begin
			dout_re <= COS_PI_4;
		end
		else if (data_f == 4'h3 || data_f == 4'hd) begin
			dout_re <= SIN_PI_8;
		end
		else if (data_f == 4'h4 || data_f == 4'hc) begin
			dout_re <= SIN_0;
		end
		else if (data_f == 4'h5 || data_f == 4'hb) begin
			dout_re <= ~SIN_PI_8 + {(COS_SIN-1){1'b0},1'b1};
		end
		else if (data_f == 4'h6 || data_f == 4'ha) begin
			dout_re <= ~COS_PI_4 + {(COS_SIN-1){1'b0},1'b1};
		end
		else if (data_f == 4'h7 || data_f == 4'h9) begin
			dout_re <= ~COS_PI_8 + {(COS_SIN-1){1'b0},1'b1};
		end
		else begin //data_f = 4'h8
			dout_re <= ~COS_0 + {(COS_SIN-1){1'b0},1'b1};
		end
	end
end

always @(posedge clk or negedge n_rst) begin
	if(!n_rst) begin
		dout_im <= {(COS_SIN){1'b0}};
	end
	else begin
		if (data_f == 4'h0 || data_f == 4'h8) begin
			dout_im <= SIN_0;
		end
		else if (data_f == 4'h1 || data_f == 4'h7) begin
			dout_im <= SIN_PI_8;
		end
		else if (data_f == 4'h2 || data_f == 4'h6) begin
			dout_im <= SIN_PI_4;
		end
		else if (data_f == 4'h3 || data_f == 4'h5) begin
			dout_im <= COS_PI_8;
		end
		else if (data_f == 4'h4) begin
			dout_im <= COS_0;
		end
		else if (data_f == 4'h9 || data_f == 4'hf) begin
			dout_im <= ~SIN_PI_8 + {(COS_SIN-1){1'b0},1'b1};
		end
		else if (data_f == 4'ha || data_f == 4'he) begin
			dout_im <= ~COS_PI_4 + {(COS_SIN-1){1'b0},1'b1};
		end
		else if (data_f == 4'hb || data_f == 4'hd) begin
			dout_im <= ~COS_PI_8 + {(COS_SIN-1){1'b0},1'b1};
		end
		else begin //data_f = 4'hc
			dout_im <= ~COS_0 + {(COS_SIN-1){1'b0},1'b1};
		end
	end
end

reg dout_vld_f;
always @(posedge clk or negedge n_rst) begin
	if (!n_rst) begin
		dout_vld_f <= 1'b0;
	end
	else begin
		dout_vld_f <= din_vld;
	end
end


assign data = {dout_re,dout_im};
assign dout_vld = dout_vld_f;

endmodule
